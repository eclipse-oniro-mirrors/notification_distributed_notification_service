# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/distributed_notification_service/notification.gni")
import("//build/ohos.gni")

config("ans_distributed_config") {
  include_dirs = [ "${services_path}/distributed/include" ]
}

ohos_shared_library("libans_distributed") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [
    "src/distributed_database.cpp",
    "src/distributed_database_callback.cpp",
    "src/distributed_device_callback.cpp",
    "src/distributed_flow_control.cpp",
    "src/distributed_notification_manager.cpp",
    "src/distributed_preferences.cpp",
    "src/distributed_preferences_database.cpp",
    "src/distributed_preferences_info.cpp",
    "src/distributed_screen_status_manager.cpp",
  ]

  include_dirs = [ "include" ]

  defines = []

  configs = [
    ":ans_distributed_config",
    "${frameworks_module_ans_path}:ans_innerkits_public_config",
  ]

  deps = [ "${frameworks_module_ans_path}:ans_innerkits" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "kv_store:distributeddata_inner",
  ]

  if (ans_hitrace_usage) {
    external_deps += [ "hitrace:hitrace_meter" ]
    defines += [ "HITRACE_METER_ENABLE" ]
  }

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_shared_library("libans_softbus_distributed") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  sources = [
    "src/helper/bundle_resource_helper.cpp",
    "src/helper/distributed_preference.cpp",
    "src/helper/distributed_rdb_helper.cpp",
    "src/soft_bus/distributed_client.cpp",
    "src/soft_bus/distributed_cmd_service.cpp",
    "src/soft_bus/distributed_extern_intferface.cpp",
    "src/soft_bus/distributed_liveview_all_scenarios_extension_wrapper.cpp",
    "src/soft_bus/distributed_local_config.cpp",
    "src/soft_bus/distributed_manager.cpp",
    "src/soft_bus/distributed_observer_service.cpp",
    "src/soft_bus/distributed_publish_service.cpp",
    "src/soft_bus/distributed_server.cpp",
    "src/soft_bus/distributed_service.cpp",
    "src/soft_bus/distributed_service_uitls.cpp",
    "src/soft_bus/distributed_socket.cpp",
    "src/soft_bus/distributed_subscribe_service.cpp",
    "src/soft_bus/distributed_subscriber.cpp",
    "src/soft_bus/distributed_timer_service.cpp",
    "src/tlv_box/box_base.cpp",
    "src/tlv_box/bundle_icon_box.cpp",
    "src/tlv_box/match_box.cpp",
    "src/tlv_box/request_box.cpp",
    "src/tlv_box/state_box.cpp",
    "src/tlv_box/tlv_box.cpp",
  ]

  include_dirs = [
    "${services_path}/distributed/include/helper",
    "${services_path}/distributed/include/soft_bus",
    "${services_path}/distributed/include/tlv_box",
  ]

  deps = [ "${frameworks_module_ans_path}:ans_innerkits" ]

  defines = []

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:runtime",
    "ability_runtime:uri_permission_mgr",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "dsoftbus:softbus_client",
    "ffrt:libffrt",
    "hilog:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
    "screenlock_mgr:screenlock_client",
    "time_service:time_client",
    "zlib:libz",
  ]

  if (ans_hitrace_usage) {
    external_deps += [ "hitrace:hitrace_meter" ]
    defines += [ "HITRACE_METER_ENABLE" ]
  }

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}
