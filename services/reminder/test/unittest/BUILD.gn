# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/distributed_notification_service/notification.gni")
import("//build/ohos.gni")
import("//build/test.gni")

module_output_path =
    "${component_name}/distributed_notification_service/unittest"

ohos_unittest("reminder_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/ans/include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
  ]

  defines = []

  sources = [
    "mock/mock_access_token_helper.cpp",
    "mock/mock_bundle_manager_helper.cpp",
    "mock/mock_ipc.cpp",
    "reminder_data_manager_test.cpp",
  ]

  deps = [
    "${frameworks_module_ans_path}:ans_innerkits",
    "${frameworks_module_reminder_path}:reminder_innerkits",
    "${services_path}/reminder:libreminder",
  ]

  if (distributed_notification_supported) {
    defines += [ "DISTRIBUTED_NOTIFICATION_SUPPORTED" ]
    deps += [ "${services_path}/distributed:libans_distributed" ]
    include_dirs += [ "${services_path}/distributed/include" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  if (device_usage) {
    external_deps += [ "device_usage_statistics:usagestatsinner" ]
    defines += [ "DEVICE_USAGE_STATISTICS_ENABLE" ]
  }

  if (player_framework) {
    external_deps += [ "player_framework:media_client" ]
    defines += [ "PLAYER_FRAMEWORK_ENABLE" ]
  }

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  if (hisysevent_usage) {
    external_deps += [ "hisysevent:libhisysevent" ]
    cflags += [ "-DHAS_HISYSEVENT_PART" ]
  }

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_unittest("reminder_agent_service_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
  ]

  defines = []

  sources = [
    "${services_path}/reminder/src/reminder_agent_service.cpp",
    "mock/mock_accesstoken_kit.cpp",
    "mock/mock_notification_helper.cpp",
    "mock/mock_os_account_manager.cpp",
    "mock/mock_reminder_bundle_manager_helper.cpp",
    "mock/mock_reminder_data_manager.cpp",
    "reminder_agent_service_test.cpp",
  ]

  deps = [
    "${frameworks_module_ans_path}:ans_innerkits",
    "${frameworks_module_reminder_path}:reminder_innerkits",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "data_share:datashare_common",
    "ffrt:libffrt",
    "hilog:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_unittest("reminder_access_token_helper_test") {
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
  ]

  sources = [
    "${services_path}/reminder/src/reminder_access_token_helper.cpp",
    "${services_path}/reminder/test/unittest/mock/mock_accesstoken_kit.cpp",
    "access_token_helper_test/access_token_helper_test.cpp",
  ]

  deps = [ "${frameworks_module_reminder_path}:reminder_innerkits" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  if (player_framework) {
    external_deps += [ "player_framework:media_client" ]
    defines = [ "PLAYER_FRAMEWORK_ENABLE" ]
  }
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_unittest("reminder_bundle_manager_helper_branch_test") {
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
    "bundle_manager_helper_branch_test/include",
  ]

  sources = [
    "bundle_manager_helper_branch_test/bundle_manager_helper_branch_test.cpp",
    "bundle_manager_helper_branch_test/mock_service_registry.cpp",
  ]

  deps = [
    "${frameworks_module_reminder_path}:reminder_innerkits",
    "${services_path}/reminder:libreminder",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  if (player_framework) {
    external_deps += [ "player_framework:media_client" ]
    defines = [ "PLAYER_FRAMEWORK_ENABLE" ]
  }
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_unittest("reminder_os_account_manager_helper_test") {
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
  ]

  sources = [ "os_account_manager_helper_test.cpp" ]

  deps = [
    "${frameworks_module_reminder_path}:reminder_innerkits",
    "${services_path}/reminder:libreminder",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  if (player_framework) {
    external_deps += [ "player_framework:media_client" ]
    defines = [ "PLAYER_FRAMEWORK_ENABLE" ]
  }
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_unittest("reminder_service_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
  ]

  defines = []

  sources = [
    "mock/mock_access_token_helper.cpp",
    "mock/mock_accesstoken_kit.cpp",
    "mock/mock_bundle_manager_helper.cpp",
    "mock/mock_bundle_mgr.cpp",
    "mock/mock_ipc.cpp",
    "mock/mock_os_account_manager.cpp",
    "reminder_store_test.cpp",
  ]

  deps = [
    "${frameworks_module_reminder_path}:reminder_innerkits",
    "${services_path}/reminder:libreminder",
  ]

  if (distributed_notification_supported) {
    defines += [ "DISTRIBUTED_NOTIFICATION_SUPPORTED" ]
    deps += [ "${services_path}/distributed:libans_distributed" ]
    include_dirs += [ "${services_path}/distributed/include" ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  if (device_usage) {
    external_deps += [ "device_usage_statistics:usagestatsinner" ]
    defines += [ "DEVICE_USAGE_STATISTICS_ENABLE" ]
  }

  if (player_framework) {
    external_deps += [ "player_framework:media_client" ]
    defines += [ "PLAYER_FRAMEWORK_ENABLE" ]
  }

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  if (hisysevent_usage) {
    external_deps += [ "hisysevent:libhisysevent" ]
    cflags += [ "-DHAS_HISYSEVENT_PART" ]
  }

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_unittest("reminder_agent_service_ability_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path
  include_dirs = [
    ".",
    "include",
    "/${services_path}/reminder/include",
    "${services_path}/reminder/test/unittest/mock/include",
  ]

  defines = []

  sources = [ "reminder_agent_service_ability_test.cpp" ]

  deps = [
    "${frameworks_module_reminder_path}:reminder_innerkits",
    "${services_path}/reminder:libreminder",
  ]

  if (distributed_notification_supported) {
    defines += [ "DISTRIBUTED_NOTIFICATION_SUPPORTED" ]
    deps += [ "${services_path}/distributed:libans_distributed" ]
    include_dirs += [ "${services_path}/distributed/include" ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "time_service:time_client",
  ]

  if (device_usage) {
    external_deps += [ "device_usage_statistics:usagestatsinner" ]
    defines += [ "DEVICE_USAGE_STATISTICS_ENABLE" ]
  }

  if (player_framework) {
    external_deps += [ "player_framework:media_client" ]
    defines += [ "PLAYER_FRAMEWORK_ENABLE" ]
  }

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  if (hisysevent_usage) {
    external_deps += [ "hisysevent:libhisysevent" ]
    cflags += [ "-DHAS_HISYSEVENT_PART" ]
  }

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

group("unittest") {
  testonly = true
  deps = [
    ":reminder_access_token_helper_test",
    ":reminder_agent_service_ability_test",
    ":reminder_agent_service_test",
    ":reminder_bundle_manager_helper_branch_test",
    ":reminder_os_account_manager_helper_test",
    ":reminder_service_test",
    ":reminder_unit_test",
  ]
}
