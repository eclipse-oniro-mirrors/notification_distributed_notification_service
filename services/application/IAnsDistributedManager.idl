/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface OHOS.Notification.IAnsDialogCallback;
interface OHOS.Notification.IAnsSubscriberLocalLiveView;
interface OHOS.Notification.IAnsSubscriber;
interface OHOS.Notification.IAnsOperationCallback;

sequenceable OHOS.Notification.NotificationBundleOption;
sequenceable OHOS.Notification.NotificationDisable;
sequenceable OHOS.Notification.NotificationDoNotDisturbDate;
sequenceable OHOS.Notification.NotificationDoNotDisturbProfile;
sequenceable OHOS.Notification.NotificationRequest;
sequenceable OHOS.Notification.NotificationSlot;
sequenceable OHOS.Notification.NotificationSubscribeInfo;
sequenceable OHOS.Notification.NotificationOperationInfo;
sequenceable OHOS.Notification.Notification;
sequenceable OHOS.Notification.NotificationButtonOption;
sequenceable OHOS.Notification.NotificationCheckRequest;
sequenceable OHOS.IRemoteObject;

interface OHOS.Notification.IAnsDistributedManager {
    void IsDistributedEnabled([out] boolean enabled);

    void SetDistributedEnabledBySlot(
        [in] int slotTypeInt, [in] String deviceType, [in] boolean enabled);

    void IsDistributedEnabledBySlot(
        [in] int slotTypeInt, [in] String deviceType, [out] boolean enabled);

    void EnableDistributed([in] boolean enabled);

    void EnableDistributedByBundle([in] sptr<NotificationBundleOption> bundleOption, [in] boolean enabled);

    void EnableDistributedSelf([in] boolean enabled);

    void IsDistributedEnableByBundle([in] sptr<NotificationBundleOption> bundleOption, [out] boolean enabled);

    void GetDeviceRemindType([out] int remindTypeInt);

    void GetAllDistribuedEnabledBundles([in] String deviceType, [out] NotificationBundleOption[] bundleOption);

    void SetDistributedEnabledByBundle(
        [in] sptr<NotificationBundleOption> bundleOption, [in] String deviceType, [in] boolean enabled);

    void SetDistributedEnabled([in] String deviceType, [in] boolean enabled);

    void IsDistributedEnabled([in] String deviceType, [out] boolean enabled);

    void GetDistributedAbility([out] int abilityId);

    void GetDistributedAuthStatus([in] String deviceType, [in] String deviceId, [in] int userId, [out] boolean isAuth);

    void SetDistributedAuthStatus([in] String deviceType, [in] String deviceId, [in] int userId, [in] boolean isAuth);

    void IsSmartReminderEnabled([in] String deviceType, [out] boolean enabled);

    void SetSmartReminderEnabled([in] String deviceType, [in] boolean enabled);

    void IsDistributedEnabledByBundle([in] sptr<NotificationBundleOption> bundleOption, [in] String deviceType, [out] boolean enabled);

    void SetTargetDeviceStatus([in] String deviceType, [in] unsigned int status, [in] String deviceId);

    void SetTargetDeviceStatus([in] String deviceType, [in] unsigned int status, [in] unsigned int controlFlag, [in] String deviceId, [in] int userId);

    void GetTargetDeviceStatus([in] String deviceType, [out] int status);

    void DistributeOperation([in] null_sptr<NotificationOperationInfo> operationInfo, [in] IAnsOperationCallback operationCallback);

    void ReplyDistributeOperation([in] String hashCode, [in] int resultCode);

    void SetTargetDeviceBundleList([in] String deviceType, [in] String deviceId, [in] int operatorType, [in] String[] bundleList);

    void SetTargetDeviceSwitch([in] String deviceType, [in] String deviceId, [in] boolean notificaitonEnable, [in] boolean liveViewEnable);
}
