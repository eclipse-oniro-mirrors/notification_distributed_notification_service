# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/distributed_notification_service/notification.gni")
import("//build/config/components/ets_frontend/ets2abc_config.gni")
import("//build/ohos.gni")

ohos_shared_library("notification_manager_ani") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  include_dirs = [
    "./include",
    "./include/manager",
    "${core_path}/common/include",
    "${inner_api_path}",
    "${frameworks_path}/cj/ffi/include",
  ]

  sources = [
    "./src/manager/ani_ans_dialog_callback.cpp",
    "./src/manager/ani_cance.cpp",
    "./src/manager/ani_display_badge.cpp",
    "./src/manager/ani_distributed_enable.cpp",
    "./src/manager/ani_do_not_disturb_date.cpp",
    "./src/manager/ani_do_not_disturb_profile.cpp",
    "./src/manager/ani_get_active.cpp",
    "./src/manager/ani_local_live_view.cpp",
    "./src/manager/ani_manager.cpp",
    "./src/manager/ani_notification_enable.cpp",
    "./src/manager/ani_on.cpp",
    "./src/manager/ani_open_settings.cpp",
    "./src/manager/ani_publish.cpp",
    "./src/manager/ani_push_callback.cpp",
    "./src/manager/ani_remove_group.cpp",
    "./src/manager/ani_request_enable.cpp",
    "./src/manager/ani_slot.cpp",
    "./src/manager/ani_support_template.cpp",
    "./src/manager/ani_sync_config.cpp",
    "./src/sts_action_button.cpp",
    "./src/sts_bundle_option.cpp",
    "./src/sts_common.cpp",
    "./src/sts_convert_other.cpp",
    "./src/sts_disturb_mode.cpp",
    "./src/sts_notification_content.cpp",
    "./src/sts_notification_flag.cpp",
    "./src/sts_notification_manager.cpp",
    "./src/sts_request.cpp",
    "./src/sts_slot.cpp",
    "./src/sts_sorting.cpp",
    "./src/sts_sorting_map.cpp",
    "./src/sts_subscribe.cpp",
    "./src/sts_subscribe_info.cpp",
    "./src/sts_subscriber.cpp",
    "./src/sts_template.cpp",
    "./src/sts_throw_erro.cpp",
    "./src/sts_user_input.cpp",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${frameworks_module_ans_path}:ans_innerkits",
    "${frameworks_path}/cj/ffi:cj_notification_manager_ffi",
  ]

  defines = []

  if (distributed_notification_service_feature_local_liveview) {
    defines += [ "ANS_FEATURE_LIVEVIEW_LOCAL_LIVEVIEW" ]
  }

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:abilitykit_native",
    "ability_runtime:ani_base_context",
    "ability_runtime:ani_common",
    "ability_runtime:ani_wantagent_common",
    "ability_runtime:app_context",
    "ability_runtime:runtime",
    "ability_runtime:wantagent_innerkits",
    "access_token:libtokenid_sdk",
    "ace_engine:ace_uicontent",
    "c_utils:utils",
    "ffrt:libffrt",
    "hilog:libhilog",
    "image_framework:image_ani",
    "image_framework:image_native",
    "ipc:ipc_core",
    "napi:ace_napi",
    "resource_management:global_resmgr",
    "runtime_core:ani",
  ]

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}

ohos_shared_library("notification_subscribe_ani") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  include_dirs = [
    "./include",
    "./include/subscribe",
    "${core_path}/common/include",
    "${inner_api_path}",
    "${frameworks_path}/cj/ffi/include",
  ]

  configs = [ "${frameworks_module_ans_path}:ans_innerkits_public_config" ]

  sources = [
    "./src/sts_action_button.cpp",
    "./src/sts_bundle_option.cpp",
    "./src/sts_common.cpp",
    "./src/sts_convert_other.cpp",
    "./src/sts_disturb_mode.cpp",
    "./src/sts_notification_content.cpp",
    "./src/sts_notification_flag.cpp",
    "./src/sts_notification_manager.cpp",
    "./src/sts_request.cpp",
    "./src/sts_slot.cpp",
    "./src/sts_sorting.cpp",
    "./src/sts_sorting_map.cpp",
    "./src/sts_subscribe.cpp",
    "./src/sts_subscribe_info.cpp",
    "./src/sts_subscriber.cpp",
    "./src/sts_template.cpp",
    "./src/sts_throw_erro.cpp",
    "./src/sts_user_input.cpp",
    "./src/subscribe/ani_remove.cpp",
    "./src/subscribe/ani_subscribe.cpp",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${frameworks_module_ans_path}:ans_innerkits",
    "${frameworks_path}/cj/ffi:cj_notification_manager_ffi",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ani_common",
    "ability_runtime:ani_common",
    "ability_runtime:ani_wantagent_common",
    "ability_runtime:runtime",
    "ability_runtime:wantagent_innerkits",
    "c_utils:utils",
    "hilog:libhilog",
    "image_framework:image",
    "image_framework:image_ani",
    "image_framework:image_native",
    "ipc:ipc_core",
    "napi:ace_napi",
    "resource_management:global_resmgr",
    "runtime_core:ani",
  ]

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}
