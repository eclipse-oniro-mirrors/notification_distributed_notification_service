/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable OHOS.Notification.Notification;
sequenceable OHOS.Notification.NotificationSortingMap;
sequenceable OHOS.Notification.NotificationDoNotDisturbDate;
sequenceable OHOS.Notification.EnabledNotificationCallbackData;
sequenceable OHOS.Notification.BadgeNumberCallbackData;
sequenceable OHOS.Notification.NotificationOperationInfo;
interface OHOS.Notification.IAnsSubscriber {
    void OnConnected();
    void OnDisconnected();
    void OnConsumed([in] sptr<Notification> notification, [in] sptr<NotificationSortingMap> notificationMap);
    void OnConsumed([in] sptr<Notification> notification);
    [ipcincapacity 520] void OnConsumedWithMaxCapacity([in] sptr<Notification> notification, [in] sptr<NotificationSortingMap> notificationMap);
    [ipcincapacity 520] void OnConsumedWithMaxCapacity([in] sptr<Notification> notification);
    void OnConsumedList([in] sptr<Notification>[] notifications, [in] sptr<NotificationSortingMap> notificationMap);
    void OnCanceled([in] sptr<Notification> notification, [in] sptr<NotificationSortingMap> notificationMap, [in] int deleteReason);
    void OnCanceled([in] sptr<Notification> notification, [in] int deleteReason);
    [ipcincapacity 520] void OnCanceledWithMaxCapacity([in] sptr<Notification> notification, [in] sptr<NotificationSortingMap> notificationMap, [in] int deleteReason);
    [ipcincapacity 520] void OnCanceledWithMaxCapacity([in] sptr<Notification> notification, [in] int deleteReason);
    void OnCanceledList([in] sptr<Notification>[] notifications, [in] sptr<NotificationSortingMap> notificationMap, [in] int deleteReason);
    void OnUpdated([in] sptr<NotificationSortingMap> notificationMap);
    void OnDoNotDisturbDateChange([in] sptr<NotificationDoNotDisturbDate> date);
    void OnEnabledNotificationChanged([in] sptr<EnabledNotificationCallbackData> callbackData);
    void OnBadgeChanged([in] sptr<BadgeNumberCallbackData> badgeData);
    void OnBadgeEnabledChanged([in] sptr<EnabledNotificationCallbackData> callbackData);
    void OnApplicationInfoNeedChanged([in] String bundleName);
    int OnOperationResponse([in] sptr<NotificationOperationInfo> operationInfo);
}
